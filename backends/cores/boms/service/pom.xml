<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>dk.sunepoulsen.tech-enterprise-labs</groupId>
    <artifactId>tel-service-bom</artifactId>
    <version>1.0-0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>11</java.version>
        <javadoc.show.level>public</javadoc.show.level>

        <!-- Tech Enterprise Lab versions -->
        <tel-service-core.version>1.0-0-SNAPSHOT</tel-service-core.version>

        <!-- Spring versions -->
        <spring-boot.version>2.1.12.RELEASE</spring-boot.version>
        <spring-framework.version>5.2.3.RELEASE</spring-framework.version>
        <spring-oauth2.version>2.4.0.RELEASE</spring-oauth2.version>
        <spring-jwt.version>1.1.0.RELEASE</spring-jwt.version>

        <!-- Library versions -->
        <cucumber.version>1.2.5</cucumber.version>
        <hamcrest.version>1.3</hamcrest.version>
        <hibernate-validator.version>6.1.2.Final</hibernate-validator.version>
        <junit.version>4.13</junit.version>
        <log4j.over.slf4j.version>1.7.30</log4j.over.slf4j.version>
        <logback.version>1.2.3</logback.version>
        <mockito.version>1.10.19</mockito.version>

        <!-- Docker -->
        <docker.compose.ct.directory>${project.basedir}/docker/ct</docker.compose.ct.directory>
        <docker.compose.stress-test.directory>${project.basedir}/docker/stress-test</docker.compose.stress-test.directory>
        <docker.base.image>mc-spring-image:latest</docker.base.image>
        <skip.unit.tests>false</skip.unit.tests>
    </properties>

    <repositories>
        <repository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <!-- ======================================================================== -->
            <!--            Spring Boot                                                   -->
            <!-- ======================================================================== -->

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jetty</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-autoconfigure</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-configuration-processor</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>

            <!-- ======================================================================== -->
            <!--            Spring Boot Security                                          -->
            <!-- ======================================================================== -->

            <dependency>
                <groupId>org.springframework.security.oauth</groupId>
                <artifactId>spring-security-oauth2</artifactId>
                <version>${spring-oauth2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.security.oauth.boot</groupId>
                <artifactId>spring-security-oauth2-autoconfigure</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.security</groupId>
                <artifactId>spring-security-jwt</artifactId>
                <version>1.1.0.RELEASE${spring-jwt.version}</version>
            </dependency>

            <!-- ======================================================================== -->
            <!--            Tech Enterprise Labs                                          -->
            <!-- ======================================================================== -->

            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>tel-service-core</artifactId>
                <version>${tel-service-core.version}</version>
            </dependency>

            <!-- ======================================================================== -->
            <!--            Logging                                                       -->
            <!-- ======================================================================== -->

            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>log4j-over-slf4j</artifactId>
                <version>${log4j.over.slf4j.version}</version>
            </dependency>

            <!-- ======================================================================== -->
            <!--            Tests                                                         -->
            <!-- ======================================================================== -->

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-core</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-all</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- ======================================================================== -->
            <!--            Cucumber Testing                                              -->
            <!-- ======================================================================== -->

            <dependency>
                <groupId>info.cukes</groupId>
                <artifactId>cucumber-java</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>info.cukes</groupId>
                <artifactId>cucumber-junit</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- ======================================================================== -->
        <!--            Spring Boot                                                   -->
        <!-- ======================================================================== -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>

        <!-- ======================================================================== -->
        <!--            Tech Enterprise Labs                                          -->
        <!-- ======================================================================== -->

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>tel-service-core</artifactId>
        </dependency>

        <!-- ======================================================================== -->
        <!--            Logging                                                       -->
        <!-- ======================================================================== -->

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
        </dependency>

        <!-- ======================================================================== -->
        <!--            Tests                                                         -->
        <!-- ======================================================================== -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- ======================================================================== -->
        <!--            Cucumber Testing                                              -->
        <!-- ======================================================================== -->

        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-java</artifactId>
        </dependency>
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-junit</artifactId>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <skipTests>${skip.unit.tests}</skipTests>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9.1</version>
                <configuration>
                    <aggregate>true</aggregate>
                    <show>${javadoc.show.level}</show>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-help-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <output>${project.build.outputDirectory}/effective-pom.xml</output>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-effective-pom</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>effective-pom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    <rm>true</rm>
                    <imageName>${project.artifactId}</imageName>
                    <baseImage>${docker.base.image}</baseImage>
                    <entryPoint>["/bin/sh", "-c", "java $JAVA_OPTS -jar /opt/app/${project.build.finalName}.jar"]
                    </entryPoint>

                    <imageTags>
                        <imageTag>${project.version}</imageTag>
                        <imageTag>latest</imageTag>
                    </imageTags>

                    <resources>
                        <resource>
                            <targetPath>/opt/app</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
                <executions>
                    <execution>
                        <id>build-docker-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9.1</version>
                <configuration>
                    <aggregate>true</aggregate>
                    <show>${javadoc.show.level}</show>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>build</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <properties>
                <test.log.dir>${project.build.directory}/surefire-reports</test.log.dir>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.5.0</version>
                        <executions>
                            <execution>
                                <id>remove-docker-images</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-delete-dangling-images.sh</executable>
                                    <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

        </profile>

        <profile>
            <id>component-tests</id>

            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <test.log.dir>${project.build.directory}/failsafe-reports</test.log.dir>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.5.0</version>
                        <executions>
                            <execution>
                                <id>start-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.ct.directory}</workingDirectory>
                                    <arguments>
                                        <argument>up</argument>
                                        <argument>-d</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>list-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.ct.directory}</workingDirectory>
                                    <arguments>
                                        <argument>ps</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.ct.directory}</workingDirectory>
                                    <arguments>
                                        <argument>stop</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remove-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.ct.directory}</workingDirectory>
                                    <arguments>
                                        <argument>rm</argument>
                                        <argument>-f</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remove-docker-images</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-delete-dangline-images.sh</executable>
                                    <workingDirectory>${docker.compose.ct.directory}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>stress-tests</id>

            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <test.log.dir>${project.build.directory}/failsafe-reports</test.log.dir>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>com.lazerycode.jmeter</groupId>
                        <artifactId>jmeter-maven-plugin</artifactId>
                        <version>2.7.0</version>
                        <executions>
                            <execution>
                                <id>jmeter-run</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>jmeter</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>jmeter-check-results</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>results</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <testFilesIncluded>stresstest.jmx</testFilesIncluded>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.5.0</version>
                        <executions>
                            <execution>
                                <id>start-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.stress-test.directory}</workingDirectory>
                                    <arguments>
                                        <argument>up</argument>
                                        <argument>-d</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>list-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.stress-test.directory}</workingDirectory>
                                    <arguments>
                                        <argument>ps</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.stress-test.directory}</workingDirectory>
                                    <arguments>
                                        <argument>stop</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remove-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-compose</executable>
                                    <workingDirectory>${docker.compose.stress-test.directory}</workingDirectory>
                                    <arguments>
                                        <argument>rm</argument>
                                        <argument>-f</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remove-docker-images</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker-delete-dangline-images.sh</executable>
                                    <workingDirectory>${docker.compose.stress-test.directory}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>